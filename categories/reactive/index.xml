<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Reactive - Category - Coding Man</title>
        <link>http://itcodingman.github.io/categories/reactive/</link>
        <description>Reactive - Category - Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 07 Jun 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/categories/reactive/" rel="self" type="application/rss+xml" /><item>
    <title></title>
    <link>http://itcodingman.github.io/java_mono_list_to_flux/</link>
    <pubDate>Tue, 07 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mono_list_to_flux/</guid>
    <description><![CDATA[1. 概述 有时在反应式编程中，我们可能有一个发布大量项目的发布者。在某些情况下，此发布者的消费者可能无法一次性处理所有项目。因此，我们可能需要异]]></description>
</item>
<item>
    <title></title>
    <link>http://itcodingman.github.io/java_mono_defer/</link>
    <pubDate>Mon, 06 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mono_defer/</guid>
    <description><![CDATA[1. 概述 在反应式编程中，我们可以通过多种方式创建Mono或Flux类型的发布者。在这里，我们将看看使用defer方法来延迟Mono发布者的执行]]></description>
</item>
<item>
    <title>用 Akka 介绍 Spring</title>
    <link>http://itcodingman.github.io/akka_with_spring/</link>
    <pubDate>Tue, 10 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/akka_with_spring/</guid>
    <description><![CDATA[1. 简介 在本文中，我们将专注于将 Akka 与 Spring 框架集成——以允许将基于 Spring 的服务注入 Akka actor。 在阅读本文之前，建议先了解 Akka 的基础知识。 2. As中的依赖]]></description>
</item>
<item>
    <title>Akka Streams 指南</title>
    <link>http://itcodingman.github.io/akka_streams/</link>
    <pubDate>Mon, 09 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/akka_streams/</guid>
    <description><![CDATA[1. 概述 在本文中，我们将研究建立在 Akka actor 框架之上的akka-streams库，它遵循响应式流宣言。Akka Streams API 允许我们从独立的步骤轻松组合数据转]]></description>
</item>
<item>
    <title>Akka HTTP 简介</title>
    <link>http://itcodingman.github.io/akka_http/</link>
    <pubDate>Sat, 07 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/akka_http/</guid>
    <description><![CDATA[概述 在本教程中，借助 Akka 的Actor和Stream模型，我们将学习如何设置 Akka 以创建提供基本 CRUD 操作的 HTTP API。 2.Maven依赖 首先，让我们看一]]></description>
</item>
<item>
    <title>Java 中的 Akka Actor 简介</title>
    <link>http://itcodingman.github.io/akka_actors_java/</link>
    <pubDate>Fri, 06 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/akka_actors_java/</guid>
    <description><![CDATA[1. 简介 Akka是一个开源库，可通过利用 Actor 模型帮助使用 Java 或 Scala 轻松开发并发和分布式应用程序。 在本教程中，我们将介绍基本功能，例如定义参与者、他们]]></description>
</item>
</channel>
</rss>
