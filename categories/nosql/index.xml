<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>NoSQL - Category - Coding Man</title>
        <link>http://itcodingman.github.io/categories/nosql/</link>
        <description>NoSQL - Category - Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 05 Jun 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/categories/nosql/" rel="self" type="application/rss+xml" /><item>
    <title>在同一 MongoDB 更新中推送和设置操作</title>
    <link>http://itcodingman.github.io/java_mongodb_push_set/</link>
    <pubDate>Sun, 05 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mongodb_push_set/</guid>
    <description><![CDATA[1. 概述 $push是 MongoDB 中的更新运算符，用于将值添加到数组中。相比之下，$set运算符用于更新文档中现有字段的值。 在这个简短的教程中，我们将介绍]]></description>
</item>
<item>
    <title>使用 Java 驱动程序在 MongoDB 中获取最后插入的文档 ID</title>
    <link>http://itcodingman.github.io/java_mongodb_last_inserted_id/</link>
    <pubDate>Sat, 04 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mongodb_last_inserted_id/</guid>
    <description><![CDATA[1. 概述 有时，我们需要刚刚插入MongoDB数据库的文档的 ID。例如，我们可能希望将 ID 作为响应发回给调用者，或者记录创建的对象以进行调试。 在本]]></description>
</item>
<item>
    <title>MongoDB中不区分大小写的排序</title>
    <link>http://itcodingman.github.io/java_mongodb_case_insensitive_sorting/</link>
    <pubDate>Fri, 03 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mongodb_case_insensitive_sorting/</guid>
    <description><![CDATA[1. 概述 默认情况下，MongoDB引擎在对提取的数据进行排序时会考虑字符大小写。通过指定Aggregations或Collations可以执行]]></description>
</item>
<item>
    <title>使用 Java 的 MongoDB 指南</title>
    <link>http://itcodingman.github.io/java_mongodb/</link>
    <pubDate>Wed, 01 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_mongodb/</guid>
    <description><![CDATA[1. 概述 在本文中，我们将了解MongoDB的集成，这是一个非常流行的 NoSQL 开源数据库与独立的 Java 客户端。 MongoDB 是用 C++ 编写的，具有许多可靠的特性，例如 ma]]></description>
</item>
<item>
    <title>Apache SolrJ 在 Java 中使用 Solr 指南</title>
    <link>http://itcodingman.github.io/apache_solrj/</link>
    <pubDate>Tue, 05 Jun 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/apache_solrj/</guid>
    <description><![CDATA[1. 概述 Apache Solr是一个建立在 Lucene 之上的开源搜索平台。Apache SolrJ 是一个基于 Java 的 Solr 客户端，它为搜索的主要功能（如索引、查询和删除文档）提供接口]]></description>
</item>
<item>
    <title>Spring JPA – 多个数据库</title>
    <link>http://itcodingman.github.io/spring_data_jpa_multiple_databases/</link>
    <pubDate>Wed, 27 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_data_jpa_multiple_databases/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将为具有多个数据库的 Spring Data JPA 系统实现一个简单的 Spring 配置。 2. 实体 首先，让我们创建两个简单的实体，每个实体都存在于一个单独的数]]></description>
</item>
<item>
    <title>使用 Spring Data 中的 CassandraTemplate</title>
    <link>http://itcodingman.github.io/spring_data_cassandratemplate_cqltemplate/</link>
    <pubDate>Mon, 25 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_data_cassandratemplate_cqltemplate/</guid>
    <description><![CDATA[1. 概述 这是 Spring Data Cassandra 文章系列的第二篇。在本文中，我们将主要关注数据访问层中的CassandraTemplate和 CQL 查询。您可以在该系列的第一篇文]]></description>
</item>
</channel>
</rss>
