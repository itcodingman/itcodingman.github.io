<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring Data - Category - Coding Man</title>
        <link>http://itcodingman.github.io/categories/spring-data/</link>
        <description>Spring Data - Category - Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 19 May 2018 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/categories/spring-data/" rel="self" type="application/rss+xml" /><item>
    <title>Apache Ignite 与 Spring Data</title>
    <link>http://itcodingman.github.io/apache_ignite_spring_data/</link>
    <pubDate>Sat, 19 May 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/apache_ignite_spring_data/</guid>
    <description><![CDATA[1. 概述 在本快速指南中，我们将重点介绍如何将 Spring Data API 与 Apache Ignite 平台集成。 要了解 Apache Ignite，请查看我们之前的指南。 2. Maven 设置 除了现有的依赖项，我们还]]></description>
</item>
<item>
    <title>带有 Spring Data REST 的 AngularJS CRUD 应用程序</title>
    <link>http://itcodingman.github.io/angularjs_crud_with_spring_data_rest/</link>
    <pubDate>Fri, 13 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/angularjs_crud_with_spring_data_rest/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将创建一个简单的 CRUD 应用程序示例，使用 AngularJS 作为前端，使用 Spring Data REST 作为后端。 2. 创建 REST 数据服务 为了创建对持久性的支持，我们将使用]]></description>
</item>
<item>
    <title>在 Spring 中使用 Thymeleaf</title>
    <link>http://itcodingman.github.io/thymeleaf_in_spring_mvc/</link>
    <pubDate>Fri, 19 Feb 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/thymeleaf_in_spring_mvc/</guid>
    <description><![CDATA[1. 概述 Thymeleaf是一个 Java 模板引擎，用于处理和创建 HTML、XML、JavaScript、CSS 和文本。 在本教程中，我们将讨论如何在 Spring]]></description>
</item>
<item>
    <title>了解 Spring 中的 getBean()</title>
    <link>http://itcodingman.github.io/spring_getbean/</link>
    <pubDate>Thu, 28 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_getbean/</guid>
    <description><![CDATA[1. 简介 在本教程中，我们将介绍*BeanFactory.getBean()*方法的不同变体。 简单地说，正如该方法的名称所暗示的，它负责从 Spring 容器]]></description>
</item>
<item>
    <title>Spring JPA – 多个数据库</title>
    <link>http://itcodingman.github.io/spring_data_jpa_multiple_databases/</link>
    <pubDate>Wed, 27 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_data_jpa_multiple_databases/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将为具有多个数据库的 Spring Data JPA 系统实现一个简单的 Spring 配置。 2. 实体 首先，让我们创建两个简单的实体，每个实体都存在于一个单独的数]]></description>
</item>
<item>
    <title>使用 Spring Data 中的 CassandraTemplate</title>
    <link>http://itcodingman.github.io/spring_data_cassandratemplate_cqltemplate/</link>
    <pubDate>Mon, 25 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_data_cassandratemplate_cqltemplate/</guid>
    <description><![CDATA[1. 概述 这是 Spring Data Cassandra 文章系列的第二篇。在本文中，我们将主要关注数据访问层中的CassandraTemplate和 CQL 查询。您可以在该系列的第一篇文]]></description>
</item>
</channel>
</rss>
