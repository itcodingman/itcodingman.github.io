<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Coding Man</title>
        <link>http://itcodingman.github.io/posts/</link>
        <description>All Posts | Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 25 Jul 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>确定对象是否为原始类型</title>
    <link>http://itcodingman.github.io/java_object_primitive_type/</link>
    <pubDate>Mon, 25 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_object_primitive_type/</guid>
    <description><![CDATA[1. 概述 有时我们需要确定一个对象是否是原始类型，特别是对于包装原始类型。但是，标准 JDK 中没有内置方法来实现这一点。 在本快速教程中，我们将了解如何]]></description>
</item>
<item>
    <title>Java中整数中的位数</title>
    <link>http://itcodingman.github.io/java_number_of_digits_in_int/</link>
    <pubDate>Sat, 23 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_number_of_digits_in_int/</guid>
    <description><![CDATA[1. 简介 在这个快速教程中，我们将探索在 Java中获取整数位数的不同方法。 我们还将分析不同的方法，以确定哪种算法最适合每种情况。 2.整数位数 对于]]></description>
</item>
<item>
    <title>了解 Java 中的 NumberFormatException</title>
    <link>http://itcodingman.github.io/java_number_format_exception/</link>
    <pubDate>Thu, 21 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_number_format_exception/</guid>
    <description><![CDATA[1. 简介 当Java无法将String转换为数字类型时，它会抛出NumberFormatException—— 一个未经检查的异常。 由于它是unc]]></description>
</item>
<item>
    <title>Java中的数字类指南</title>
    <link>http://itcodingman.github.io/java_number_class/</link>
    <pubDate>Wed, 20 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_number_class/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将讨论 Java 的*Number类*。首先，我们将了解 Number类的作用以及它包含的方法。然后，我们将深入研究这个抽象类的各]]></description>
</item>
<item>
    <title>使用 NullAway 避免 NullPointerExceptions</title>
    <link>http://itcodingman.github.io/java_nullaway/</link>
    <pubDate>Tue, 19 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_nullaway/</guid>
    <description><![CDATA[1. 概述 多年来，我们一直在采取多种策略，从 Elvis 运算符到*Optional，以帮助从我们的应用程序中删除NullPointerException 。]]></description>
</item>
<item>
    <title>来自集合的 Java 空安全流</title>
    <link>http://itcodingman.github.io/java_null_safe_streams_from_collections/</link>
    <pubDate>Mon, 18 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_null_safe_streams_from_collections/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将看到如何从 Java 集合创建空安全流。 首先，需要对 Java 8 的方法参考、Lambda 表达式、可选 和流 API 有一定的了解才能完全理解本材]]></description>
</item>
<item>
    <title>在 Java 中计算第 n 个根</title>
    <link>http://itcodingman.github.io/java_nth_root/</link>
    <pubDate>Sat, 16 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_nth_root/</guid>
    <description><![CDATA[1. 概述 在某些情况下，尝试使用*pow()*在 Java 中查找第 n 个根是不准确的。原因是双精度数可能会在途中丢失精度。因此，我们可能需要对结果进行润色]]></description>
</item>
<item>
    <title>Java NIO2 中的 WatchService 指南</title>
    <link>http://itcodingman.github.io/java_nio2_watchservice/</link>
    <pubDate>Tue, 12 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_nio2_watchservice/</guid>
    <description><![CDATA[1. 概述 在本文中，我们将探索 Java NIO.2 文件系统 API 的WatchService接口。这是 Java 7 中与FileVisitor接口一起引入的较新 IO API 的鲜为人知的]]></description>
</item>
<item>
    <title>NIO2 FileVisitor 指南</title>
    <link>http://itcodingman.github.io/java_nio2_file_visitor/</link>
    <pubDate>Mon, 11 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_nio2_file_visitor/</guid>
    <description><![CDATA[1. 概述 在本文中，我们将探讨 NIO2 的一个有趣特性*——FileVisitor*接口。 所有操作系统和一些第三方应用程序都具有文件搜索功能，用户可以在]]></description>
</item>
<item>
    <title>NIO2 文件属性 API 指南</title>
    <link>http://itcodingman.github.io/java_nio2_file_attribute/</link>
    <pubDate>Sun, 10 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/java_nio2_file_attribute/</guid>
    <description><![CDATA[1. 概述 在本文中，我们将探讨 Java 7 NIO.2 文件系统 API 的高级特性之一——特别是文件属性 API。 如果您想先深入了解这些基础部分，我们之前已经介绍了文件和路]]></description>
</item>
</channel>
</rss>
