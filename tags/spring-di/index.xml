<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring DI - Tag - Coding Man</title>
        <link>http://itcodingman.github.io/tags/spring-di/</link>
        <description>Spring DI - Tag - Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 15 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/tags/spring-di/" rel="self" type="application/rss+xml" /><item>
    <title>Spring @Autowired 指南</title>
    <link>http://itcodingman.github.io/spring_autowired/</link>
    <pubDate>Wed, 15 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_autowired/</guid>
    <description><![CDATA[1. 概述 从 Spring 2.5 开始，该框架引入了注解驱动的依赖注入。此功能的主要注释是*@Autowired* 。 它允许 Spring 解析协作 bean 并将其注入到我们的 bean 中。 在本]]></description>
</item>
<item>
    <title>Spring 中的注解：@Autowired、@Resource 和 @Inject</title>
    <link>http://itcodingman.github.io/spring_annotations_resource_inject_autowire/</link>
    <pubDate>Wed, 08 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_annotations_resource_inject_autowire/</guid>
    <description><![CDATA[1. 概述 在本 Spring Framework 教程中，我们将演示如何使用与依赖注入相关的注解，即*@Resource*、@Inject和*@Autowired*注解。这些注]]></description>
</item>
<item>
    <title>Spring 控制反转和依赖注入简介</title>
    <link>http://itcodingman.github.io/inversion_control_and_dependency_injection_in_spring/</link>
    <pubDate>Wed, 04 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/inversion_control_and_dependency_injection_in_spring/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将介绍 IoC（控制反转）和 DI（依赖注入）的概念，并了解它们在 Spring 框架中是如何实现的。 2. 什么是控制反转？ 控制反转是软件工]]></description>
</item>
<item>
    <title>Spring 的构造函数依赖注入</title>
    <link>http://itcodingman.github.io/constructor_injection_in_spring/</link>
    <pubDate>Wed, 29 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/constructor_injection_in_spring/</guid>
    <description><![CDATA[1. 简介 可以说，现代软件设计最重要的开发原则之一是依赖注入 (DI)，它很自然地源于另一个至关重要的原则：模块化。 这个教程将探讨 Spring 中一种特定类型]]></description>
</item>
</channel>
</rss>
