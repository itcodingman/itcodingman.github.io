<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring DI - Tag - Coding Man</title>
        <link>http://itcodingman.github.io/tags/spring-di/</link>
        <description>Spring DI - Tag - Coding Man</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 17 Feb 2016 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://itcodingman.github.io/tags/spring-di/" rel="self" type="application/rss+xml" /><item>
    <title>使用 Spring 的 JPA 指南</title>
    <link>http://itcodingman.github.io/the_persistence_layer_with_spring_and_jpa/</link>
    <pubDate>Wed, 17 Feb 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/the_persistence_layer_with_spring_and_jpa/</guid>
    <description><![CDATA[1. 概述 本教程展示了如何使用 Hibernate 作为持久性提供者来使用JPA 设置 Spring 。 有关使用基于 Java 的配置和项目的基本 Maven pom 设置 Spring 上下文的分步介绍，请参阅本文。 我们]]></description>
</item>
<item>
    <title>Spring JDBC</title>
    <link>http://itcodingman.github.io/spring_jdbc_jdbctemplate/</link>
    <pubDate>Fri, 29 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_jdbc_jdbctemplate/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将介绍 Spring JDBC 模块的实际用例。 Spring JDBC 中的所有类都分为四个独立的包： core — JDBC 的核心功能。该包下的一些重要类包括JdbcTempl]]></description>
</item>
<item>
    <title>JPA 和 Spring 的 DAO</title>
    <link>http://itcodingman.github.io/spring_dao_jpa/</link>
    <pubDate>Sun, 24 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_dao_jpa/</guid>
    <description><![CDATA[1. 概述 本文将展示如何使用 Spring 和 JPA 实现 DAO。有关核心 JPA 配置，请参阅有关 JPA with Spring 的文章。 2. 不再有 Spring 模板 从 Spring 3.1 开始，已弃用JpaTemplate和相]]></description>
</item>
<item>
    <title>Spring @Controller 和 @RestController 注解</title>
    <link>http://itcodingman.github.io/spring_controller_vs_restcontroller/</link>
    <pubDate>Fri, 22 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_controller_vs_restcontroller/</guid>
    <description><![CDATA[1. 概述 在这个简短的教程中，我们将讨论Spring MVC 中*@Controller和@RestController*注解之间的区别。 我们可以将第一]]></description>
</item>
<item>
    <title>Spring Boot 2 中的 Max-HTTP-Header-Size</title>
    <link>http://itcodingman.github.io/spring_boot_max_http_header_size/</link>
    <pubDate>Wed, 20 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_boot_max_http_header_size/</guid>
    <description><![CDATA[1. 概述 Spring Boot Web 应用程序默认包含一个预配置的嵌入式 Web 服务器。但是，在某些情况下，我们希望修改默认配置以满足自定义要求。 在本教程中，我们将了解如何]]></description>
</item>
<item>
    <title>什么是 Spring Bean</title>
    <link>http://itcodingman.github.io/spring_bean/</link>
    <pubDate>Sun, 17 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_bean/</guid>
    <description><![CDATA[1. 概述 Bean 是 Spring Framework 的一个关键概念。因此，理解这个概念对于掌握框架并以有效的方式使用它至关重要。 不幸的是，**对于 Spring bean 究竟是什么这个简单问题，并没]]></description>
</item>
<item>
    <title>Spring @Autowired 指南</title>
    <link>http://itcodingman.github.io/spring_autowired/</link>
    <pubDate>Sat, 16 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_autowired/</guid>
    <description><![CDATA[1. 概述 从 Spring 2.5 开始，该框架引入了注解驱动的依赖注入。此功能的主要注释是*@Autowired* 。 它允许 Spring 解析协作 bean 并将其注入到我们的 bean 中。 在本]]></description>
</item>
<item>
    <title>Spring 中的注解：@Autowired、@Resource 和 @Inject</title>
    <link>http://itcodingman.github.io/spring_annotations_resource_inject_autowire/</link>
    <pubDate>Fri, 15 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/spring_annotations_resource_inject_autowire/</guid>
    <description><![CDATA[1. 概述 在本 Spring Framework 教程中，我们将演示如何使用与依赖注入相关的注解，即*@Resource*、@Inject和*@Autowired*注解。这些注]]></description>
</item>
<item>
    <title>Spring 控制反转和依赖注入简介</title>
    <link>http://itcodingman.github.io/inversion_control_and_dependency_injection_in_spring/</link>
    <pubDate>Sun, 10 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/inversion_control_and_dependency_injection_in_spring/</guid>
    <description><![CDATA[1. 概述 在本教程中，我们将介绍 IoC（控制反转）和 DI（依赖注入）的概念，并了解它们在 Spring 框架中是如何实现的。 2. 什么是控制反转？ 控制反转是软件工]]></description>
</item>
<item>
    <title>Spring 的构造函数依赖注入</title>
    <link>http://itcodingman.github.io/constructor_injection_in_spring/</link>
    <pubDate>Tue, 05 Jan 2016 00:00:00 &#43;0000</pubDate>
    <author>codingman</author>
    <guid>http://itcodingman.github.io/constructor_injection_in_spring/</guid>
    <description><![CDATA[1. 简介 可以说，现代软件设计最重要的开发原则之一是依赖注入 (DI)，它很自然地源于另一个至关重要的原则：模块化。 这个教程将探讨 Spring 中一种特定类型]]></description>
</item>
</channel>
</rss>
